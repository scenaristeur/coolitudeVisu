/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void panel1_Click1(GPanel source, GEvent event) { //_CODE_:panel1:512783:
  println("panel1 - GPanel event occured " + System.currentTimeMillis()%10000000 );
} //_CODE_:panel1:512783:

public void chargefichier_click1(GButton source, GEvent event) { //_CODE_:chargeficfier:395436:
  println("button1 - GButton event occured " + System.currentTimeMillis()%10000000 );
  selectInput("Select a file to process:", "fileSelected");
} //_CODE_:chargeficfier:395436:

public void urlEndpoint_change1(GTextField source, GEvent event) { //_CODE_:urlEndpoint:586046:
  println("textfield1 - GTextField event occured " + System.currentTimeMillis()%10000000 );
} //_CODE_:urlEndpoint:586046:

public void chargeUrl_click(GButton source, GEvent event) { //_CODE_:chargeUrl:578594:
  println("chargeUrl - GButton event occured " + System.currentTimeMillis()%10000000 );
  println("connexion :"+urlEndpoint.getText());
  accessor = DatasetAccessorFactory.createHTTP(urlEndpoint.getText());
  model.add(updated);
//  outilBox.traitement(model);
//  outilBox.findSujets(model);
  outilBox.afficheVisu(model);
//  model.write(System.out, "RDF/XML-ABBREV");
} //_CODE_:chargeUrl:578594:

public void clear_click1(GButton source, GEvent event) { //_CODE_:clear:961854:
  println("clear - GButton event occured " + System.currentTimeMillis()%10000000 );
  model = ModelFactory.createOntologyModel( OntModelSpec.OWL_DL_MEM );
  outilBox.initialisePhysics();
  outilBox.initialiseCentre();
} //_CODE_:clear:961854:

public void LiteralCheckBox_clicked1(GCheckbox source, GEvent event) { //_CODE_:LiteralCheckBox:871673:
  println("afficheLiteral - GCheckbox event occured " + System.currentTimeMillis()%10000000 );
  afficheLiteral=source.isSelected();
  println(source.isSelected());
} //_CODE_:LiteralCheckBox:871673:

public void distanceRessortSlider_change1(GSlider source, GEvent event) { //_CODE_:distanceRessortSlider:205478:
  println("distanceSlider - GSlider event occured " + System.currentTimeMillis()%10000000 );
  distanceRessort=source.getValueF();
} //_CODE_:distanceRessortSlider:205478:

public void forceRessortSlider_change1(GSlider source, GEvent event) { //_CODE_:forceRessortSlider:654297:
  println("attractionSlider - GSlider event occured " + System.currentTimeMillis()%10000000 );
  forceRessort=source.getValueF();
} //_CODE_:forceRessortSlider:654297:

public void forceAttractionSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:forceAttractionSlider:987695:
  println("forceAttractionSlider - GCustomSlider event occured " + System.currentTimeMillis()%10000000 );
  forceAttraction=source.getValueF();
} //_CODE_:forceAttractionSlider:987695:

public void distanceAttractSlider_change1(GCustomSlider source, GEvent event) { //_CODE_:distanceAttractSlider:336813:
  println("distanceAttractSlider - GCustomSlider event occured " + System.currentTimeMillis()%10000000 );
  distanceAttraction=source.getValueF();
} //_CODE_:distanceAttractSlider:336813:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setCursor(ARROW);
  if(frame != null)
    frame.setTitle("Sketch Window");
  panel1 = new GPanel(this, 27, 22, 323, 277, "Tab bar text");
  panel1.setText("Tab bar text");
  panel1.setOpaque(true);
  panel1.addEventHandler(this, "panel1_Click1");
  chargeficfier = new GButton(this, 8, 24, 80, 30);
  chargeficfier.setText("charge fichier");
  chargeficfier.addEventHandler(this, "chargefichier_click1");
  urlEndpoint = new GTextField(this, 7, 65, 222, 30, G4P.SCROLLBARS_NONE);
  urlEndpoint.setText("http://fuseki-smag0.rhcloud.com/ds/data");
  urlEndpoint.setOpaque(true);
  urlEndpoint.addEventHandler(this, "urlEndpoint_change1");
  chargeUrl = new GButton(this, 234, 68, 80, 30);
  chargeUrl.setText("Charge Url");
  chargeUrl.addEventHandler(this, "chargeUrl_click");
  clear = new GButton(this, 103, 24, 80, 30);
  clear.setText("Clear");
  clear.addEventHandler(this, "clear_click1");
  LiteralCheckBox = new GCheckbox(this, 13, 120, 120, 20);
  LiteralCheckBox.setTextAlign(GAlign.LEFT, GAlign.MIDDLE);
  LiteralCheckBox.setText("Affiche Literal");
  LiteralCheckBox.setOpaque(false);
  LiteralCheckBox.addEventHandler(this, "LiteralCheckBox_clicked1");
  label1 = new GLabel(this, 6, 99, 312, 20);
  label1.setText("-----------------------------");
  label1.setOpaque(false);
  distanceRessortSlider = new GSlider(this, 17, 166, 100, 40, 10.0);
  distanceRessortSlider.setShowValue(true);
  distanceRessortSlider.setLimits(1.0, 0.0, 2.0);
  distanceRessortSlider.setNumberFormat(G4P.DECIMAL, 2);
  distanceRessortSlider.setOpaque(true);
  distanceRessortSlider.addEventHandler(this, "distanceRessortSlider_change1");
  forceRessortSlider = new GSlider(this, 13, 233, 100, 40, 10.0);
  forceRessortSlider.setShowValue(true);
  forceRessortSlider.setLimits(1.0, 0.0, 2.0);
  forceRessortSlider.setNumberFormat(G4P.DECIMAL, 2);
  forceRessortSlider.setOpaque(true);
  forceRessortSlider.addEventHandler(this, "forceRessortSlider_change1");
  distanceRessortLbl = new GLabel(this, 15, 143, 99, 20);
  distanceRessortLbl.setText("Distance ressort");
  distanceRessortLbl.setOpaque(false);
  forceRessortLbl = new GLabel(this, 25, 209, 80, 20);
  forceRessortLbl.setText("Force ressort");
  forceRessortLbl.setOpaque(false);
  distanceAttracLbl = new GLabel(this, 130, 147, 105, 20);
  distanceAttracLbl.setText("Distance attraction");
  distanceAttracLbl.setOpaque(false);
  forceAttracLbl = new GLabel(this, 127, 210, 111, 20);
  forceAttracLbl.setText("Force attraction");
  forceAttracLbl.setOpaque(false);
  forceAttractionSlider = new GCustomSlider(this, 132, 232, 100, 40, "grey_blue");
  forceAttractionSlider.setLimits(0.5, 0.0, 1.0);
  forceAttractionSlider.setNumberFormat(G4P.DECIMAL, 2);
  forceAttractionSlider.setOpaque(false);
  forceAttractionSlider.addEventHandler(this, "forceAttractionSlider_change1");
  distanceAttractSlider = new GCustomSlider(this, 129, 166, 100, 40, "grey_blue");
  distanceAttractSlider.setLimits(1.0, 0.0, 2.0);
  distanceAttractSlider.setNumberFormat(G4P.DECIMAL, 0);
  distanceAttractSlider.setOpaque(true);
  distanceAttractSlider.addEventHandler(this, "distanceAttractSlider_change1");
  panel1.addControl(chargeficfier);
  panel1.addControl(urlEndpoint);
  panel1.addControl(chargeUrl);
  panel1.addControl(clear);
  panel1.addControl(LiteralCheckBox);
  panel1.addControl(label1);
  panel1.addControl(distanceRessortSlider);
  panel1.addControl(forceRessortSlider);
  panel1.addControl(distanceRessortLbl);
  panel1.addControl(forceRessortLbl);
  panel1.addControl(distanceAttracLbl);
  panel1.addControl(forceAttracLbl);
  panel1.addControl(forceAttractionSlider);
  panel1.addControl(distanceAttractSlider);
}

// Variable declarations 
// autogenerated do not edit
GPanel panel1; 
GButton chargeficfier; 
GTextField urlEndpoint; 
GButton chargeUrl; 
GButton clear; 
GCheckbox LiteralCheckBox; 
GLabel label1; 
GSlider distanceRessortSlider; 
GSlider forceRessortSlider; 
GLabel distanceRessortLbl; 
GLabel forceRessortLbl; 
GLabel distanceAttracLbl; 
GLabel forceAttracLbl; 
GCustomSlider forceAttractionSlider; 
GCustomSlider distanceAttractSlider; 
